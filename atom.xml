<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杜昆原的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-18T12:01:13.945Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>杜昆原</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 切片原理</title>
    <link href="http://example.com/2020/10/17/python_slice/"/>
    <id>http://example.com/2020/10/17/python_slice/</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2020-10-18T12:01:13.945Z</updated>
    
    <content type="html"><![CDATA[<p>《流畅的Python》第10.5小结介绍了切片原理，下文为简单总结。</p><p>以<code>List</code>对象为例，我们通常都会以如下方式进行切片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; lst &#x3D; [i for i in range(10)]</span><br><span class="line">&gt;&gt;&gt; lst[1:6:2]</span><br><span class="line">[1, 3, 5]</span><br></pre></td></tr></table></figure><p>那切片背后的原理是什么呢？</p><p>简单来说，python 会将<code>[start:stop:stride]</code>转化为<code>slice</code>类的实例，然后将该实例送入<code>__getitem__</code>函数中。在某些情况下，可以使用slice.indices()优雅地处理缺失索引和负数索引的情况，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 5为序列长度</span><br><span class="line">&gt;&gt;&gt; slice(-3, None, None).indices(5) </span><br><span class="line">(2, 5, 1)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《流畅的Python》第10.5小结介绍了切片原理，下文为简单总结。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;List&lt;/code&gt;对象为例，我们通常都会以如下方式进行切片：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 风格的对象</title>
    <link href="http://example.com/2020/10/16/python_style_object/"/>
    <id>http://example.com/2020/10/16/python_style_object/</id>
    <published>2020-10-16T16:00:00.000Z</published>
    <updated>2020-10-18T12:01:13.945Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为《流畅的Python》第9章阅读笔记，主要知识点如下。</p><h4 id="classmethod-与-staticmethod"><a href="#classmethod-与-staticmethod" class="headerlink" title="classmethod 与 staticmethod"></a>classmethod 与 staticmethod</h4><p>两者均是定义在类中的函数，并且不需要实例化便可以调用。不同点在于，classmethod 的第一个参数默认为所在类，而 staticmethod 可以被看作是一个普通的函数。</p><h4 id="私有属性与受保护属性"><a href="#私有属性与受保护属性" class="headerlink" title="私有属性与受保护属性"></a>私有属性与受保护属性</h4><p>这两种属性都是为了避免子类意外覆盖“私有属性”。但实际上，python 中无法真正实现变量的“私有”和“受保护”。</p><ul><li>私有对象：以双下划线 <code>__</code> 开头，例如<code>Dog</code>类中的<code>__color</code>属性。实例化后，该属性会被“命名改写”机制改为<code>_Dog__color</code>。因此，如果了解了具体的改写规则，所谓的私有对象其实可以也是可以被访问到的。</li><li>受保护属性：以单下划线开头。该规则为约定俗成，python 解释器实际上不会对其进行特殊处理。</li></ul><h4 id="slots-类属性"><a href="#slots-类属性" class="headerlink" title="__slots__类属性"></a><code>__slots__</code>类属性</h4><p>python 会构造一个名为<code>__dict__</code>的字典来存储实例属性，而字典会消耗较多的内存。当实例数比较多时，这个问题会更加明显。为了解决这个问题，可以利用<code>__slots__</code>定义实例属性，由于实例只能拥有<code>__slots__</code>中定义的属性，所以解释器便可以将实例属性存储在类似元组的结构中，达到减少内存的目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇为《流畅的Python》第9章阅读笔记，主要知识点如下。&lt;/p&gt;
&lt;h4 id=&quot;classmethod-与-staticmethod&quot;&gt;&lt;a href=&quot;#classmethod-与-staticmethod&quot; class=&quot;headerlink&quot; title=&quot;cl</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计 Python 函数参数的正确姿势</title>
    <link href="http://example.com/2020/10/15/python_args_design/"/>
    <id>http://example.com/2020/10/15/python_args_design/</id>
    <published>2020-10-15T16:00:00.000Z</published>
    <updated>2020-10-18T12:01:13.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h3><p>不合理的函数参数设计，可能会给程序带来一些难以发现的bug，比如下面这个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def hauntedfunc(queue&#x3D;[]):</span><br><span class="line">    queue.append(0)</span><br><span class="line">    return queue</span><br></pre></td></tr></table></figure><p>hauntedfunc 函数的功能很简单，目的就是向输入的 queue 中增加一个0元素。但是当我们调用 hauntedfunc 时，奇怪的现象出现了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 第一次调用，符合预期</span><br><span class="line">&gt;&gt;&gt; hauntedfunc(queue&#x3D;[1])</span><br><span class="line">[1, 0]</span><br><span class="line"># 第二次调用，符合预期</span><br><span class="line">&gt;&gt;&gt; hauntedfunc()</span><br><span class="line">[0]</span><br><span class="line"># 第三次调用，不符合预期</span><br><span class="line">&gt;&gt;&gt; hauntedfunc()</span><br><span class="line">[0, 0]</span><br></pre></td></tr></table></figure><p>第三次调用的输出结果多了一个0元素！</p><hr><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>而这个 bug 的原因，是我们使用了可变类型作为参数的默认值，即 <code>queue=[]</code>。在 python 中, 函数参数的默认值被保存在了函数对象的 <code>.__defaults__</code> 属性中。当执行 hauntedfunc() 时, queue 变量其实只是默认参数 <code>[]</code> 的引用。我们可以用下面的脚本来验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; id(hauntedfunc.__defaults__[0])</span><br><span class="line">1788363018056</span><br><span class="line">&gt;&gt;&gt; id(hauntedfunc())</span><br><span class="line">1788363018056</span><br></pre></td></tr></table></figure><p>所以在第二次调用后，hauntedfunc 实际上已经变成了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def hauntedfunc(queue&#x3D;[0]):</span><br><span class="line">    queue.append(0)</span><br><span class="line">    return queue</span><br></pre></td></tr></table></figure><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为了避免这个 bug，我们可以把 hauntedfunc 函数做如下修改。由于 <code>None</code> 为不可变对象，所以自然不必担心函数的默认值被意外修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def hauntedfunc(queue&#x3D;None):</span><br><span class="line">    if queue is None:</span><br><span class="line">        queue &#x3D; []</span><br><span class="line">    queue.append(0)</span><br><span class="line">    return queue</span><br></pre></td></tr></table></figure><p>这样做看起来没什么问题了，但是如果我们希望函数不要修改传入的参数，还需要对 hauntedfunc 做一些修改。具体地，可以通过 <code>list()</code> 创建传入参数的副本，后续操作均在副本上进行。这里要注意深拷贝浅拷贝的问题，具体细节就不再赘述了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def hauntedfunc(queue&#x3D;None):</span><br><span class="line">    if queue is None:</span><br><span class="line">        queue &#x3D; []</span><br><span class="line">    else:</span><br><span class="line">        queue &#x3D; list(queue)</span><br><span class="line">    queue.append(0)</span><br><span class="line">    return queue</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; constant_list &#x3D; [1]</span><br><span class="line">&gt;&gt;&gt; hauntedfunc(queue&#x3D;constant_list)</span><br><span class="line">[1, 0]</span><br><span class="line">&gt;&gt;&gt; constant_list</span><br><span class="line">[1]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h3&gt;&lt;p&gt;不合理的函数参数设计，可能会给程序带来一些难以发现的bug，比如下面这个例子。&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="bug清除计划" scheme="http://example.com/tags/bug%E6%B8%85%E9%99%A4%E8%AE%A1%E5%88%92/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="http://example.com/2020/10/10/about/"/>
    <id>http://example.com/2020/10/10/about/</id>
    <published>2020-10-10T16:00:00.000Z</published>
    <updated>2020-10-18T12:01:13.945Z</updated>
    
    <content type="html"><![CDATA[<p>上海交大硕士在读，研究方向为深度学习模型压缩，目前在字节跳动AI Lab实习。</p><p>联系方式：<a href="mailto:&#100;&#117;&#107;&#117;&#x6e;&#121;&#117;&#x61;&#x6e;&#64;&#x73;&#x6a;&#x74;&#117;&#46;&#x65;&#100;&#x75;&#x2e;&#x63;&#x6e;">&#100;&#117;&#107;&#117;&#x6e;&#121;&#117;&#x61;&#x6e;&#64;&#x73;&#x6a;&#x74;&#117;&#46;&#x65;&#100;&#x75;&#x2e;&#x63;&#x6e;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上海交大硕士在读，研究方向为深度学习模型压缩，目前在字节跳动AI Lab实习。&lt;/p&gt;
&lt;p&gt;联系方式：&lt;a href=&quot;mailto:&amp;#100;&amp;#117;&amp;#107;&amp;#117;&amp;#x6e;&amp;#121;&amp;#117;&amp;#x61;&amp;#x6e;&amp;#64;&amp;#x73;&amp;#x6</summary>
      
    
    
    
    
  </entry>
  
</feed>
